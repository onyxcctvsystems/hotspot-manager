const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const mikronode = require('mikronode-ng');

const app = express();
app.use(bodyParser.json());

// Environment variables (replace these with your values)
const FLUTTERWAVE_SECRET_KEY = 'FLWSECK-45ce0f391e3b84458c13a728d71c909e-18b00baba9dvt-X';
const MIKROTIK_IP = '78.142.61.120';
const MIKROTIK_USERNAME = 'admin';
const MIKROTIK_PASSWORD = 'Netflix@2@!@#';

// Route to verify payment and authenticate user
app.post('/api/authenticate', async (req, res) => {
    const { transaction_id, phoneNumber } = req.body;

    try {
        // Verify payment with Flutterwave
        const flutterwaveResponse = await axios.get(
            `https://api.flutterwave.com/v3/transactions/${transaction_id}/verify`,
            {
                headers: { Authorization: `Bearer ${FLUTTERWAVE_SECRET_KEY}` },
            }
        );

        const paymentData = flutterwaveResponse.data;
        if (paymentData.status !== 'success') {
            return res.status(400).json({ error: 'Payment verification failed' });
        }

        // Connect to Mikrotik API and create a user
        const connection = mikronode.getConnection(MIKROTIK_IP, MIKROTIK_USERNAME, MIKROTIK_PASSWORD);
        connection.connect().then(([login]) => {
            login('/ip/hotspot/user/add', {
                name: phoneNumber,
                password: 'wifi123', // Replace with desired password
                profile: 'default', // Replace with hotspot profile
            }).then(() => {
                login.close();
                res.status(200).json({ message: 'User authenticated successfully' });
            }).catch(err => {
                login.close();
                console.error(err);
                res.status(500).json({ error: 'Failed to create user in Mikrotik' });
            });
        }).catch(err => {
            console.error(err);
            res.status(500).json({ error: 'Failed to connect to Mikrotik' });
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'An error occurred during authentication' });
    }
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
